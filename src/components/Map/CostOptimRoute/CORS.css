.title {
    font-weight: bold;
    font-size: 16px;
    padding: 2px;
 }

/* .Collapse .ant-collapse-item > div:last-child  {
  background-color: #fff;
} */

.Collapse {
  border: 1px solid #001b38 !important;
  margin-top: 5px;
}

.Collapse > div{
  background: #f7f7f7;

}
/* .Collapse > div > div > div{
  background: #fff;
} */

.Collapse > .ant-collapse-item > .ant-collapse-content > .ant-collapse-content-box {
  background: #fff;

}

 .ant-collapse .ant-collapse-icon-position-left {
  background-color: #fff; 

}

.ant-collapse{
  border: 1px solid #d9d9d9;
  background-color: #fafafa;
}
.ant-collapse > .ant-collapse-item.ant-collapse-no-arrow > .ant-collapse-header {
  background-color: #fff;
  color: #fff;

}

.ant-collapse-item .ant-collapse-item-active .ant-collapse-no-arrow {
  background-color: #fff;

}
.ant-collapse-content .ant-collapse-content-active {
  background-color: #fff;

}



.ant-collapse-content-box {
  background-color: #fff;
  color: #9cadb4;

}

.ant-collapse-content {
  border-top: 1px solid #d9d9d9;
}
.Collapse > .ant-collapse-item {
  border-bottom: 0px solid #d9d9d9 !important;
  width: 100%;
}

.ctrl-panel {
  /* background-color: #001529; */
  /* color: white; */
}

 /* handleLongClickInMap(currentEvent) {

    let { Map, H,M,CORV,getCORV } = this.state
    // let { M, H,Map } = this.state
    let updateCORV = getCORV;
   debugger
   let BLCUSPValue = CORV.BLCUSP;
		var markerGroup = new window.H.map.Group();
    console.log(CORV.BLCUSP)

    var lastClickedPos = Map.screenToGeo(currentEvent.currentPointer.viewportX, currentEvent.currentPointer.viewportY);
    // round up decimal places as Geocoder can only provide upto 7 digits precision after decimal
    lastClickedPos.lat = this.roundUp(lastClickedPos.lat, 7);
    lastClickedPos.lng = this.roundUp(lastClickedPos.lng, 7);
    console.log('BLCUSP',CORV.BLCUSP)
 

    if (CORV.BLCUSP) {
      this.clearLastRouteCalculation();
      CORV.line1 = "" + lastClickedPos.lat + "," + lastClickedPos.lng;
      //var line2 = " ";
      // CORV.startValue = CORV.line1;
      this.handleChange('startValue',CORV.line1)
      this.handleChange('BLCUSP',false)
      CORV.pointA = new window.H.geo.Point(lastClickedPos.lat, lastClickedPos.lng);

      if (CORV.startMarker != null) {
        markerGroup.removeObject(CORV.startMarker);
        
      }
 
      CORV.startMarker = new window.H.map.Marker(CORV.pointA,
        {
          icon: this.createIconMarker(CORV.line1)
        });
        // this.handleChange('BLCUSP',false)
      markerGroup.addObject(CORV.startMarker);
      // CORV.bLongClickUseForStartPoint = false;
      
      
    }
    else {
      debugger
      CORV.line1 = "" + lastClickedPos.lat + "," + lastClickedPos.lng;
      //var line2 = " ";
      CORV.DestinationValue= CORV.line1;
      this.handleChange('DestinationValue',CORV.line1)
      this.handleChange('BLCUSP',true)
      CORV.pointB = new window.H.geo.Point(lastClickedPos.lat, lastClickedPos.lng);
      if (CORV.destMarker != null) {
        markerGroup.removeObject(CORV.destMarker);
      }
      CORV.destMarker = new window.H.map.Marker(CORV.pointB,
        {
          icon: this.createIconMarker(CORV.line1)
        });
        // this.handleChange('BLCUSP',true)
      markerGroup.addObject(CORV.destMarker);
      
      // CORV.bLongClickUseForStartPoint = true;
      
    }
  } */